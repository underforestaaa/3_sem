#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <sys/shm.h>

typedef enum {FIFO, SHM, MSG} TRANSMISSION_TYPE;

#define buffer_size 16384
const int data_size = 10 << 23;
TRANSMISSION_TYPE type = MSG;
typedef struct {
    long mtype;
    char mtext[buffer_size];
} msg_buff;


int main() {
    char* data_initial = malloc(data_size);
    char* data_recieved = malloc(data_size);
    srand(time(NULL));
    for(int i = 0; i < data_size; i++) {
        data_initial[i] = (char)(i % 256 - 128);
        data_recieved[i] = 0;
    }
    int key_shm = rand(), key_msg = rand();

    int fifo[2], fifo_reverse[2];
    pipe(fifo);
    pipe(fifo_reverse);

    int pid = fork();
    switch(type) {
        case FIFO:;
        if(pid == 0) {
            for(int i = 0; i < data_size; i += buffer_size)
                write(fifo[1], &data_initial[i], buffer_size);
            return 0;
        }
        else {
            for(int i = 0; i < data_size; i += buffer_size)
                read(fifo[0], &data_recieved[i], buffer_size);
            break;
        }

        case MSG:;
        int msgqid = msgget(key_msg, IPC_CREAT | 0600);
        msg_buff m_buffer;
        m_buffer.mtype = 5;
        if(pid == 0) {
            for(int i = 0; i < data_size; i += buffer_size) {
                memcpy(m_buffer.mtext, &data_initial[i], buffer_size);
                msgsnd(msgqid, &m_buffer, buffer_size, 0);
            }
            return 0;
        }
        else {
            for(int i = 0; i < data_size; i += buffer_size) {
                msgrcv(msgqid, &m_buffer, buffer_size, 5, 0);
                memcpy(&data_recieved[i], m_buffer.mtext, buffer_size);
            }
            break;
        }

        case SHM:;
        char *shm_ptr = shmat(shmget(key_shm, buffer_size, IPC_CREAT | 0600), NULL, 0);
        char space = ' ';
        if(pid == 0) {
            for(int i = 0; i < data_size; i += buffer_size) {
                memcpy(shm_ptr, &data_initial[i], buffer_size);
                write(fifo[1], &space, 1);                
                read(fifo_reverse[0], &space, 1);                
           }
            return 0;
        }        
        else {
            for(int i = 0; i < data_size; i += buffer_size) {
                read(fifo[0], &space, 1);                
                memcpy(&data_recieved[i], shm_ptr, buffer_size);
                write(fifo_reverse[1], &space, 1);                
            }
            break;
        }
    }

    for(int i = 0; i < data_size; i++)
        if(data_recieved[i] != data_initial[i]) {
            printf("Transmission error\n");
            return 0;
        }
    printf("Transmission successful\n");
    return 0;
}


Results:
buff, B	fifo, s	shm, s	msg, s
16    	4,135	26,009 4,127	
32      2,423	13,876 2,382
64     	1,392	7,248	 1,423
128	    0,946	4,067  0,948
256	    0,756	2,317	 0,718
512   	0,624	1,334  0,667
1024  	0,523	0,941  0,553
2048  	0,511	0,745  0,548
4096  	0,493	0,613  0,525
8192  	0,511	0,577  0,497
16384	  0,487	0,553  error
32768	  0,503	0,510
65536  	0,483	0,497
131072	0,499	0,501
262144	0,498	0,496
524288	0,501	0,509
1048576	0,498	0,485
2097152	0,509	0,488
4194304	0,497	0,494






